{
    "atomType": "Molecule",
    "name": "Roofing Magnet Clamp",
    "x": 0,
    "y": 0,
    "uniqueID": "40c893e5-2805-45fa-8c52-3c55ccbc4e42",
    "ioValues": [],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "94a16019-6cf3-427a-9839-a19c2bd4e9e5",
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "4fc6b19e-168f-436b-91e8-18008afcd7f6",
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "GitHubMolecule",
            "name": "Corrugated-Roofing-Circle-v2",
            "x": 0.14249363867684478,
            "y": 0.42905405405405406,
            "uniqueID": "3cb69768-3272-4bd1-b412-6552ae5666d2",
            "ioValues": [
                {
                    "name": "Number",
                    "ioValue": 75,
                    "currentEquation": "75"
                }
            ],
            "topLevel": false,
            "allAtoms": [
                {
                    "atomType": "Output",
                    "name": "Output",
                    "x": 0.98,
                    "y": 0.5,
                    "uniqueID": "c9b07578-feb3-4935-8ff2-a9abcb2ce05e",
                    "ioValues": [
                        {
                            "name": "number or geometry",
                            "ioValue": "af6c9f0a-91a3-4f1c-927c-5e583b267a3c",
                            "currentEquation": null
                        }
                    ]
                },
                {
                    "atomType": "Code",
                    "name": "Code",
                    "x": 0.4708994708994709,
                    "y": 0.4444444444444444,
                    "uniqueID": "af6c9f0a-91a3-4f1c-927c-5e583b267a3c",
                    "ioValues": [
                        {
                            "name": "number",
                            "ioValue": 75,
                            "currentEquation": null
                        },
                        {
                            "name": "height",
                            "ioValue": 40,
                            "currentEquation": null
                        }
                    ],
                    "codeVersion": 1,
                    "code": " \n      //Inputs:[number, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      let factor = 2;\n      const period = 76;\n      const amplitude = 19 / 2;\n      const xScale = period / (2 * Math.PI);\n      const nPeriods = number; \n      const circumference = nPeriods * period;\n      const radius = circumference/(2*Math.PI);\n      const angle = 35\n\n      function computeX(fraction){\n        const theta = 2 * Math.PI *fraction; // angle in radians\n        const x = radius*Math.cos(theta);\n        return x;\n      }\n\n      function computeY(fraction){\n        const theta = 2 * Math.PI * fraction; // angle in radians\n        const y = radius*Math.sin(theta);\n        return y;\n      }\n\n      function tangentAngle(fraction, clockwise = false) {\n          const theta = 2 * Math.PI * fraction;\n          const phi = clockwise\n              ? theta - Math.PI / 2 // CW\n              : theta + Math.PI / 2; // CCW\n\n          let degrees = phi * (180 / Math.PI);\n        \n          return degrees; // radians\n      }\n      \n      let shape = replicad.draw();\n\n      \n      shape.movePointerTo([computeX(0), computeY(0)])\n      \n      for (let i = 0; i < nPeriods; i++) {\n        let oneLess = (2*i-1)/(2*number);\n        let fractionStart = i/number //The percentage of the way around the circle that this point is\n        let fractionMiddle =  (2*i+1)/(2*number);\n      \n        // First spline: 0 to ÃÂ (up and back down)\n        shape = shape.smoothSplineTo(\n          [computeX(fractionStart), computeY(fractionStart)],\n          {\n            startTangent: tangentAngle(oneLess) + angle,         // Going up at start\n            startFactor: factor,\n            endTangent: tangentAngle(fractionStart)-angle,          // Coming down at ÃÂ\n            endFactor: factor\n          }\n        )\n        // Second spline: ÃÂ to 2ÃÂ (down and back up)\n        .smoothSplineTo(\n          [computeX(fractionMiddle), computeY(fractionMiddle)],\n          {\n            startTangent: tangentAngle(fractionStart)-angle,        // Going down at ÃÂ\n            startFactor: factor,\n            endTangent: tangentAngle(fractionMiddle) + angle,           // Coming up at 2ÃÂ\n            endFactor: factor\n          }\n        );\n      }\n\n      shape = shape.smoothSplineTo(\n          [computeX(0), computeY(0)],\n          {\n            startTangent: tangentAngle((2*number-1)/(2*number))+angle,        // Going down at ÃÂ\n            startFactor: factor,\n            endTangent: tangentAngle(0) - angle,           // Coming up at 2ÃÂ\n            endFactor: factor\n          });\n      \n      // Add base lines and close shape\n      shape = shape\n        .close();                          // Close path\n\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [shape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      return shape2\n      "
                },
                {
                    "atomType": "Input",
                    "name": "Number",
                    "x": 0.07755,
                    "y": 0.39444444444444443,
                    "uniqueID": "1e4c4745-5530-4f4e-9015-964044a69ef9",
                    "ioValues": [],
                    "type": "number"
                }
            ],
            "allConnectors": [
                {
                    "ap1Name": "output",
                    "ap2Name": "number or geometry",
                    "ap1ID": "af6c9f0a-91a3-4f1c-927c-5e583b267a3c",
                    "ap2ID": "c9b07578-feb3-4935-8ff2-a9abcb2ce05e"
                },
                {
                    "ap1Name": "number or geometry",
                    "ap2Name": "number",
                    "ap1ID": "1e4c4745-5530-4f4e-9015-964044a69ef9",
                    "ap2ID": "af6c9f0a-91a3-4f1c-927c-5e583b267a3c"
                }
            ],
            "parentRepo": {
                "lastFoundGit": "2025-09-20T15:47:14.645Z",
                "privateRepo": false,
                "repoName": "Corrugated-Roofing-Circle-v2",
                "dateCreated": "2025-07-11T20:40:29Z",
                "readMe": "https://raw.githubusercontent.com/BarbourSmith/Corrugated-Roofing-Circle-v2/master/README.md?sanitize=true",
                "yyyy": 2025,
                "topMoleculeID": "74e97323-dbcf-4577-bf9a-c3bca8a2acee",
                "githubMoleculesUsed": [],
                "html_url": "https://github.com/BarbourSmith/Corrugated-Roofing-Circle-v2",
                "topics": [],
                "parentRepo": null,
                "forks": 0,
                "dateModified": "739468",
                "ranking": 0,
                "searchField": "corrugated-roofing-circle-v2 barboursmith this project recreates the corrugated roofing circle using splines instead of a sampled function which is hopefully more performant ",
                "owner": "BarbourSmith",
                "description": "This project recreates the corrugated roofing circle using splines instead of a sampled function which is hopefully more performant",
                "contentURL": "https://raw.githubusercontent.com/BarbourSmith/Corrugated-Roofing-Circle-v2/master/project.abundance?sanitize=true",
                "svgURL": "https://raw.githubusercontent.com/BarbourSmith/Corrugated-Roofing-Circle-v2/master/project.svg?sanitize=true",
                "isLocal": false
            },
            "unitsKey": "Unitless",
            "fileTypeVersion": 1,
            "compiledBom": []
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.26717557251908397,
            "y": 0.7263513513513513,
            "uniqueID": "b7ba3a97-c40d-401b-b87f-ed87731ec662",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "3cb69768-3272-4bd1-b412-6552ae5666d2",
                    "currentEquation": null
                },
                {
                    "name": "height",
                    "ioValue": 100,
                    "currentEquation": "100"
                }
            ]
        },
        {
            "atomType": "Circle",
            "name": "Circle",
            "x": 0.6844783715012723,
            "y": 0.445945945945946,
            "uniqueID": "4fc6b19e-168f-436b-91e8-18008afcd7f6",
            "ioValues": [
                {
                    "name": "diameter",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "Molecule",
            "name": "Molecule",
            "x": 0.5165394402035624,
            "y": 0.6925675675675675,
            "uniqueID": "298b115b-1b1f-4954-836c-d49a060a3964",
            "ioValues": [
                {
                    "name": "input",
                    "ioValue": "b7ba3a97-c40d-401b-b87f-ed87731ec662",
                    "currentEquation": null
                }
            ],
            "topLevel": false,
            "allAtoms": [
                {
                    "atomType": "Output",
                    "name": "Output",
                    "x": 0.98,
                    "y": 0.5,
                    "uniqueID": "e0697456-c942-4503-b888-b1804fc263ce",
                    "ioValues": []
                },
                {
                    "atomType": "Input",
                    "name": "input",
                    "x": 0.07755,
                    "y": 0.31756756756756754,
                    "uniqueID": "ebfbd6c3-6fb3-4efc-ad27-326f20854db9",
                    "ioValues": [],
                    "type": "geometry"
                },
                {
                    "atomType": "Molecule",
                    "name": "Outside blank",
                    "x": 0.366412213740458,
                    "y": 0.6689189189189189,
                    "uniqueID": "c5d2d628-1f86-4bf4-ae9b-8935e60e248e",
                    "ioValues": [
                        {
                            "name": "input",
                            "ioValue": "b7ba3a97-c40d-401b-b87f-ed87731ec662",
                            "currentEquation": null
                        }
                    ],
                    "topLevel": false,
                    "allAtoms": [
                        {
                            "atomType": "Output",
                            "name": "Output",
                            "x": 0.98,
                            "y": 0.5,
                            "uniqueID": "5a0105fc-e203-4e0e-8887-d74bc27dca17",
                            "ioValues": []
                        },
                        {
                            "atomType": "Input",
                            "name": "input",
                            "x": 0.07755,
                            "y": 0.6689189189189189,
                            "uniqueID": "2efb5a84-2ed4-4971-bf9d-ffe59a288a64",
                            "ioValues": [],
                            "type": "geometry"
                        },
                        {
                            "atomType": "Rectangle",
                            "name": "Rectangle",
                            "x": 0.14758269720101783,
                            "y": 0.2736486486486487,
                            "uniqueID": "7ed34e9a-d068-4f65-8246-8ee20609d674",
                            "ioValues": [
                                {
                                    "name": "x length",
                                    "ioValue": 60,
                                    "currentEquation": "60"
                                },
                                {
                                    "name": "y length",
                                    "ioValue": 25,
                                    "currentEquation": "25"
                                }
                            ]
                        },
                        {
                            "atomType": "Extrude",
                            "name": "Extrude",
                            "x": 0.45292620865139943,
                            "y": 0.36486486486486486,
                            "uniqueID": "a7190939-af7c-44cb-a984-bfc06f1a6a7e",
                            "ioValues": [
                                {
                                    "name": "geometry",
                                    "ioValue": "7ed34e9a-d068-4f65-8246-8ee20609d674",
                                    "currentEquation": null
                                },
                                {
                                    "name": "height",
                                    "ioValue": 25,
                                    "currentEquation": "25"
                                }
                            ]
                        }
                    ],
                    "allConnectors": [
                        {
                            "ap1Name": "geometry",
                            "ap2Name": "geometry",
                            "ap1ID": "7ed34e9a-d068-4f65-8246-8ee20609d674",
                            "ap2ID": "a7190939-af7c-44cb-a984-bfc06f1a6a7e"
                        }
                    ],
                    "fileTypeVersion": 1,
                    "compiledBom": {}
                }
            ],
            "allConnectors": [
                {
                    "ap1Name": "number or geometry",
                    "ap2Name": "input",
                    "ap1ID": "ebfbd6c3-6fb3-4efc-ad27-326f20854db9",
                    "ap2ID": "c5d2d628-1f86-4bf4-ae9b-8935e60e248e"
                }
            ],
            "fileTypeVersion": 1,
            "compiledBom": {}
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry or number",
            "ap2Name": "geometry",
            "ap1ID": "3cb69768-3272-4bd1-b412-6552ae5666d2",
            "ap2ID": "b7ba3a97-c40d-401b-b87f-ed87731ec662"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "input",
            "ap1ID": "b7ba3a97-c40d-401b-b87f-ed87731ec662",
            "ap2ID": "298b115b-1b1f-4954-836c-d49a060a3964"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap1ID": "4fc6b19e-168f-436b-91e8-18008afcd7f6",
            "ap2ID": "94a16019-6cf3-427a-9839-a19c2bd4e9e5"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}